import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('HousingData.csv')

X_train, X_test, y_train, y_test = train_test_split(df.drop(['MEDV'], axis=1), df['MEDV'], test_size=0.3, random_state=0)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

class LassoRegression:
    
    def __init__(self, alpha=1.0, max_iter=1000, tol=0.0001):
        self.alpha = alpha
        self.max_iter = max_iter
        self.tol = tol
    
    def fit(self, X, y):
        self.coef_ = np.zeros(X.shape[1])
        self.intercept_ = np.mean(y)
        
        self.loss_ = []
        self.error_ = []
        
        for iteration in range(self.max_iter):
            for j in range(X.shape[1]):
                X_j = X[:, j]
                y_pred = self.predict(X)
                r = y - y_pred + self.coef_[j]*X_j
                rho = X_j.dot(r)
                if j == 0:
                    self.coef_[j] = rho
                else:
                    self.coef_[j] = self.soft_threshold(rho, self.alpha)
            
            y_pred = self.predict(X)
            loss = np.mean((y - y_pred)**2) + self.alpha*np.sum(np.abs(self.coef_))
            error = np.mean(np.abs(y - y_pred))
            
            if iteration > 0 and np.abs(loss - self.loss_[-1]) < self.tol:
                break
            
            self.loss_.append(loss)
            self.error_.append(error)
    
    def soft_threshold(self, rho, alpha):
        if rho < -alpha:
            return rho + alpha
        elif rho > alpha:
            return rho - alpha
        else:
            return 0
    
    def predict(self, X):
        return X.dot(self.coef_) + self.intercept_

lasso = LassoRegression(alpha=1.0, max_iter=1000, tol=0.0001)

lasso.fit(X_train, y_train)

y_pred = lasso.predict(X_test)
#print(y_pred)
mse = np.mean((y_test - y_pred)**2)
print('Mean squared error: {:.2f}'.format(mse))
